AWSTemplateFormatVersion: '2010-09-09'
Resources:
  DocumentAnalysisStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: DocumentAnalysisWorkflow
      RoleArn: !GetAtt DocumentAnalysisStepFunctionsRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "Document Analysis Workflow for Procurement Chatbot",
          "StartAt": "InitializeProcess",
          "States": {
            "InitializeProcess": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:us-east-1:361769603480:function:aseekbot-api-dev-init-process",
                "Payload": {
                  "input.$": "$",
                  "timestamp.$": "$$.Execution.StartTime"
                }
              },
              "OutputPath": "$.Payload",
              "Next": "UpdateStatusStarted"
            },
            "UpdateStatusStarted": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:us-east-1:361769603480:function:aseekbot-api-dev-status-updater",
                "Payload": {
                  "documentId.$": "$.documentId",
                  "userId.$": "$.userId",
                  "s3Bucket.$": "$.s3Bucket",
                  "s3Key.$": "$.s3Key",
                  "fileType.$": "$.fileType",
                  "status": "STARTED",
                  "message": "Document analysis process has started."
                }
              },
              "ResultPath": "$.statusUpdate",
              "Next": "ValidateFileAndScan"
            },
            "ValidateFileAndScan": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:us-east-1:361769603480:function:aseekbot-api-dev-file-validation",
                "Payload": {
                  "s3Bucket.$": "$.s3Bucket",
                  "s3Key.$": "$.s3Key",
                  "fileType.$": "$.fileType",
                  "documentId.$": "$.documentId"
                }
              },
              "TimeoutSeconds": 120,
              "Retry": [
                {
                  "ErrorEquals": ["States.TaskFailed"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 3,
                  "BackoffRate": 2.0
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.error",
                  "Next": "HandleValidationError"
                }
              ],
              "ResultPath": "$.validationResult",
              "Next": "UpdateStatusValidated"
            },
            "UpdateStatusValidated": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:us-east-1:361769603480:function:aseekbot-api-dev-status-updater",
                "Payload": {
                  "documentId.$": "$.documentId",
                  "userId.$": "$.userId",
                  "s3Bucket.$": "$.s3Bucket",
                  "s3Key.$": "$.s3Key",
                  "fileType.$": "$.fileType",
                  "status": "VALIDATED",
                  "message": "Document validated and scanned successfully."
                }
              },
              "ResultPath": "$.statusUpdate",
              "Next": "DetermineFileType"
            },
            "HandleValidationError": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:us-east-1:361769603480:function:aseekbot-api-dev-error-handler",
                "Payload": {
                  "error.$": "$.error",
                  "documentId.$": "$.documentId",
                  "errorType": "ValidationError"
                }
              },
              "ResultPath": "$.errorHandlerResult",
              "Next": "UpdateStatusFailed"
            },
            "DetermineFileType": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.validationResult.isTextractSupported",
                  "BooleanEquals": true,
                  "Next": "ExtractWithTextract"
                },
                {
                  "Variable": "$.fileType",
                  "StringEquals": "docx",
                  "Next": "ExtractDocxText"
                },
                {
                  "Variable": "$.fileType",
                  "StringEquals": "xlsx",
                  "Next": "ExtractXlsxData"
                },
                {
                  "Variable": "$.fileType",
                  "StringEquals": "csv",
                  "Next": "ExtractCsvData"
                }
              ],
              "Default": "HandleUnsupportedFileType"
            },
            "ExtractWithTextract": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:us-east-1:361769603480:function:aseekbot-api-dev-textract-handler",
                "Payload": {
                  "s3Bucket.$": "$.s3Bucket",
                  "s3Key.$": "$.s3Key",
                  "documentId.$": "$.documentId",
                  "fileType.$": "$.fileType"
                }
              },
              "TimeoutSeconds": 300,
              "Retry": [
                {
                  "ErrorEquals": ["States.TaskFailed"],
                  "IntervalSeconds": 3,
                  "MaxAttempts": 2,
                  "BackoffRate": 1.5
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.error",
                  "Next": "HandleExtractionError"
                }
              ],
              "ResultPath": "$.extractionResult",
              "Next": "UpdateStatusExtracted"
            },
            "ExtractDocxText": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:us-east-1:361769603480:function:aseekbot-api-dev-docx-parser",
                "Payload": {
                  "s3Bucket.$": "$.s3Bucket",
                  "s3Key.$": "$.s3Key",
                  "documentId.$": "$.documentId"
                }
              },
              "TimeoutSeconds": 180,
              "Retry": [
                {
                  "ErrorEquals": ["States.TaskFailed"],
                  "IntervalSeconds": 3,
                  "MaxAttempts": 2,
                  "BackoffRate": 1.5
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.error",
                  "Next": "HandleExtractionError"
                }
              ],
              "ResultPath": "$.extractionResult",
              "Next": "UpdateStatusExtracted"
            },
            "ExtractXlsxData": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:us-east-1:361769603480:function:aseekbot-api-dev-excel-parser",
                "Payload": {
                  "s3Bucket.$": "$.s3Bucket",
                  "s3Key.$": "$.s3Key",
                  "documentId.$": "$.documentId"
                }
              },
              "TimeoutSeconds": 180,
              "Retry": [
                {
                  "ErrorEquals": ["States.TaskFailed"],
                  "IntervalSeconds": 3,
                  "MaxAttempts": 2,
                  "BackoffRate": 1.5
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.error",
                  "Next": "HandleExtractionError"
                }
              ],
              "ResultPath": "$.extractionResult",
              "Next": "UpdateStatusExtracted"
            },
            "ExtractCsvData": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:us-east-1:361769603480:function:aseekbot-api-dev-csv-parser",
                "Payload": {
                  "s3Bucket.$": "$.s3Bucket",
                  "s3Key.$": "$.s3Key",
                  "documentId.$": "$.documentId"
                }
              },
              "TimeoutSeconds": 120,
              "Retry": [
                {
                  "ErrorEquals": ["States.TaskFailed"],
                  "IntervalSeconds": 3,
                  "MaxAttempts": 2,
                  "BackoffRate": 1.5
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.error",
                  "Next": "HandleExtractionError"
                }
              ],
              "ResultPath": "$.extractionResult",
              "Next": "UpdateStatusExtracted"
            },
            "UpdateStatusExtracted": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:us-east-1:361769603480:function:aseekbot-api-dev-status-updater",
                "Payload": {
                  "documentId.$": "$.documentId",
                  "userId.$": "$.userId",
                  "s3Bucket.$": "$.s3Bucket",
                  "s3Key.$": "$.s3Key",
                  "fileType.$": "$.fileType",
                  "extractedText.$": "$.extractionResult.Payload.extractedText",
                  "status": "TEXT_EXTRACTED",
                  "message": "Document text successfully extracted."
                }
              },
              "ResultPath": "$.statusUpdate",
              "Next": "AnalyzeContent"
            },
            "HandleExtractionError": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:us-east-1:361769603480:function:aseekbot-api-dev-error-handler",
                "Payload": {
                  "error.$": "$.error",
                  "documentId.$": "$.documentId",
                  "errorType": "ExtractionError"
                }
              },
              "ResultPath": "$.errorHandlerResult",
              "Next": "UpdateStatusFailed"
            },
            "HandleUnsupportedFileType": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:us-east-1:361769603480:function:aseekbot-api-dev-error-handler",
                "Payload": {
                  "fileType.$": "$.fileType",
                  "documentId.$": "$.documentId",
                  "errorType": "UnsupportedFileType"
                }
              },
              "ResultPath": "$.errorHandlerResult",
              "Next": "UpdateStatusFailed"
            },
            "AnalyzeContent": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:us-east-1:361769603480:function:aseekbot-api-dev-content-analyzer",
                "Payload": {
                  "extractedText.$": "$.extractionResult.Payload.extractedText",
                  "documentId.$": "$.documentId",
                  "fileType.$": "$.fileType",
                  "modelType": "BEDROCK_CLAUDE"
                }
              },
              "TimeoutSeconds": 300,
              "Retry": [
                {
                  "ErrorEquals": ["States.TaskFailed"],
                  "IntervalSeconds": 3,
                  "MaxAttempts": 2,
                  "BackoffRate": 1.5
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.error",
                  "Next": "HandleAnalysisError"
                }
              ],
              "ResultPath": "$.analysisResult",
              "Next": "UpdateStatusAnalyzed"
            },
            "UpdateStatusAnalyzed": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:us-east-1:361769603480:function:aseekbot-api-dev-status-updater",
                "Payload": {
                  "documentId.$": "$.documentId",
                  "userId.$": "$.userId",
                  "s3Bucket.$": "$.s3Bucket",
                  "s3Key.$": "$.s3Key",
                  "fileType.$": "$.fileType",
                  "analysisResults.$": "$.analysisResult.Payload.analysisResults",
                  "status": "CONTENT_ANALYZED",
                  "message": "Document content successfully analyzed."
                }
              },
              "ResultPath": "$.statusUpdate",
              "Next": "CheckMultipleDocuments"
            },
            "HandleAnalysisError": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:us-east-1:361769603480:function:aseekbot-api-dev-error-handler",
                "Payload": {
                  "error.$": "$.error",
                  "documentId.$": "$.documentId",
                  "errorType": "AnalysisError"
                }
              },
              "ResultPath": "$.errorHandlerResult",
              "Next": "UpdateStatusFailed"
            },
            "CheckMultipleDocuments": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.isMultipleDocuments",
                  "BooleanEquals": true,
                  "Next": "CompareDocuments"
                }
              ],
              "Default": "GenerateInsights"
            },
            "CompareDocuments": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:us-east-1:361769603480:function:aseekbot-api-dev-document-comparer",
                "Payload": {
                  "documents.$": "$.documents",
                  "documentId.$": "$.documentId",
                  "s3Bucket.$": "$.s3Bucket",
                  "s3Key.$": "$.s3Key"
                }
              },
              "TimeoutSeconds": 300,
              "Retry": [
                {
                  "ErrorEquals": ["States.TaskFailed"],
                  "IntervalSeconds": 3,
                  "MaxAttempts": 2,
                  "BackoffRate": 1.5
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.error",
                  "Next": "HandleComparisonError"
                }
              ],
              "ResultPath": "$.comparisonResult",
              "Next": "UpdateStatusCompared"
            },
            "UpdateStatusCompared": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:us-east-1:361769603480:function:aseekbot-api-dev-status-updater",
                "Payload": {
                  "documentId.$": "$.documentId",
                  "userId.$": "$.userId",
                  "s3Bucket.$": "$.s3Bucket",
                  "s3Key.$": "$.s3Key",
                  "fileType.$": "$.fileType",
                  "comparisonResults.$": "$.comparisonResult.Payload.comparisonResults",
                  "status": "DOCUMENTS_COMPARED",
                  "message": "Documents successfully compared."
                }
              },
              "ResultPath": "$.statusUpdate",
              "Next": "GenerateInsights"
            },
            "HandleComparisonError": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:us-east-1:361769603480:function:aseekbot-api-dev-error-handler",
                "Payload": {
                  "error.$": "$.error",
                  "documentId.$": "$.documentId",
                  "errorType": "ComparisonError"
                }
              },
              "ResultPath": "$.errorHandlerResult",
              "Next": "UpdateStatusFailed"
            },
            "GenerateInsights": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:us-east-1:361769603480:function:aseekbot-api-dev-insight-generator",
                "Payload": {
                  "analysisResults.$": "$.analysisResult.Payload.analysisResults",
                  "documentId.$": "$.documentId",
                  "s3Bucket.$": "$.s3Bucket",
                  "s3Key.$": "$.s3Key",
                  "fileType.$": "$.fileType"
                }
              },
              "TimeoutSeconds": 180,
              "Retry": [
                {
                  "ErrorEquals": ["States.TaskFailed"],
                  "IntervalSeconds": 3,
                  "MaxAttempts": 2,
                  "BackoffRate": 1.5
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.error",
                  "Next": "HandleInsightError"
                }
              ],
              "ResultPath": "$.insightsResult",
              "Next": "UpdateStatusInsightsGenerated"
            },
            "UpdateStatusInsightsGenerated": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:us-east-1:361769603480:function:aseekbot-api-dev-status-updater",
                "Payload": {
                  "documentId.$": "$.documentId",
                  "userId.$": "$.userId",
                  "s3Bucket.$": "$.s3Bucket",
                  "s3Key.$": "$.s3Key",
                  "fileType.$": "$.fileType",
                  "insights.$": "$.insightsResult.Payload.insights",
                  "status": "INSIGHTS_GENERATED",
                  "message": "Document insights successfully generated."
                }
              },
              "ResultPath": "$.statusUpdate",
              "Next": "StoreResults"
            },
            "HandleInsightError": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:us-east-1:361769603480:function:aseekbot-api-dev-error-handler",
                "Payload": {
                  "error.$": "$.error",
                  "documentId.$": "$.documentId",
                  "errorType": "InsightError"
                }
              },
              "ResultPath": "$.errorHandlerResult",
              "Next": "UpdateStatusFailed"
            },
            "StoreResults": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:us-east-1:361769603480:function:aseekbot-api-dev-result-storage",
                "Payload": {
                  "insights.$": "$.insightsResult.Payload.insights",
                  "analysisResults.$": "$.analysisResult.Payload.analysisResults",
                  "documentId.$": "$.documentId",
                  "userId.$": "$.userId",
                  "s3Bucket.$": "$.s3Bucket",
                  "s3Key.$": "$.s3Key",
                  "fileType.$": "$.fileType"
                }
              },
              "TimeoutSeconds": 120,
              "Retry": [
                {
                  "ErrorEquals": ["States.TaskFailed"],
                  "IntervalSeconds": 3,
                  "MaxAttempts": 3,
                  "BackoffRate": 1.5
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.error",
                  "Next": "HandleStorageError"
                }
              ],
              "ResultPath": "$.storageResult",
              "Next": "UpdateStatusCompleted"
            },
            "HandleStorageError": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:us-east-1:361769603480:function:aseekbot-api-dev-error-handler",
                "Payload": {
                  "error.$": "$.error",
                  "documentId.$": "$.documentId",
                  "errorType": "StorageError"
                }
              },
              "ResultPath": "$.errorHandlerResult",
              "Next": "UpdateStatusFailed"
            },
            "UpdateStatusCompleted": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:us-east-1:361769603480:function:aseekbot-api-dev-status-updater",
                "Payload": {
                  "documentId.$": "$.documentId",
                  "userId.$": "$.userId",
                  "s3Bucket.$": "$.s3Bucket",
                  "s3Key.$": "$.s3Key",
                  "fileType.$": "$.fileType",
                  "resultLocation.$": "$.storageResult.Payload.resultLocation",
                  "status": "COMPLETED",
                  "message": "Document analysis workflow completed successfully."
                }
              },
              "ResultPath": "$.statusUpdate",
              "End": true
            },
            "UpdateStatusFailed": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:us-east-1:361769603480:function:aseekbot-api-dev-status-updater",
                "Payload": {
                  "documentId.$": "$.documentId",
                  "userId.$": "$.userId",
                  "s3Bucket.$": "$.s3Bucket",
                  "s3Key.$": "$.s3Key",
                  "fileType.$": "$.fileType",
                  "error.$": "$.error",
                  "status": "FAILED",
                  "message": "Document analysis workflow failed."
                }
              },
              "ResultPath": "$.statusUpdate",
              "End": true
            }
          }
        }

  DocumentAnalysisStepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      Policies:
        - PolicyName: InvokeLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"

  DocumentAnalysisStatusTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: DocumentAnalysisStatus
      AttributeDefinitions:
        - AttributeName: documentId
          AttributeType: S
      KeySchema:
        - AttributeName: documentId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

Outputs:
  StateMachineArn:
    Value: !Ref DocumentAnalysisStateMachine
  StatusTableName:
    Value: !Ref DocumentAnalysisStatusTable