service: aseekbot-api

package:
  individually: true
  excludeDevDependencies: false
  patterns:
    - '!**/.serverless/**'
    - '!**/node_modules/**/.git'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  environment:
    AWS_S3_BUCKET_NAME: ${env:AWS_S3_BUCKET_NAME}
    DOCUMENT_ANALYSIS_STATE_MACHINE_ARN: ${env:DOCUMENT_ANALYSIS_STATE_MACHINE_ARN, 'arn:aws:states:us-east-1:361769603480:stateMachine:DocumentAnalysisWorkflow'}
    DOCUMENT_ANALYSIS_STATUS_TABLE: ${env:DOCUMENT_ANALYSIS_STATUS_TABLE, 'DocumentAnalysisStatus'}
    REQUEST_STATUS_TABLE: 'RequestStatus'
    SQS_QUEUE_URL: !Ref ProcessingQueue
    BEDROCK_AGENT_ID: '7FDALECWCL'
    BEDROCK_AGENT_ALIAS_ID: '11OBDAVIQQ'
  apiGateway:
    binaryMediaTypes:
      - 'multipart/form-data'
      - 'application/json'
      - '*/*'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:DeleteObject
      Resource: "arn:aws:s3:::${env:AWS_S3_BUCKET_NAME}/*"
    - Effect: Allow
      Action:
        - bedrock:*
      Resource: "*"
    - Effect: Allow
      Action:
        - states:StartExecution
        - states:DescribeExecution
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:Query
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/DocumentAnalysisStatus"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/RequestStatus"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/UserInteractions"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/UserFiles"
    - Effect: Allow
      Action:
        - textract:DetectDocumentText
        - textract:StartDocumentTextDetection
        - textract:GetDocumentTextDetection
        - textract:StartDocumentAnalysis
        - textract:GetDocumentAnalysis
      Resource: "*"
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:GetQueueAttributes
      Resource: !GetAtt ProcessingQueue.Arn

layers:
  awsSdkLayer:
    path: layers/aws-sdk-v3
    name: aws-sdk-v3-layer
    description: AWS SDK v3 libraries and other common dependencies
    compatibleRuntimes:
      - nodejs18.x

functions:
  # Original functions
  processChatMessage:
    handler: lambdas/processChatMessage.handler
    layers:
      - {Ref: AwsSdkLayerLambdaLayer}
    events:
      - http:
          path: processChatMessage
          method: post
          cors: true
    memorySize: 256
    timeout: 29
  uploadFile:
    handler: lambdas/uploadFile.handler
    layers:
      - {Ref: AwsSdkLayerLambdaLayer}
    events:
      - http:
          path: uploadFile
          method: post
          cors: true
    environment:
      USER_FILES_TABLE: !Ref UserFilesTable
  deleteFile:
    handler: lambdas/deleteFile.handler
    layers:
      - {Ref: AwsSdkLayerLambdaLayer}
    events:
      - http:
          path: deleteFile
          method: post
          cors: true
  downloadFile:
    handler: lambdas/downloadFile.handler
    layers:
      - {Ref: AwsSdkLayerLambdaLayer}
    events:
      - http:
          path: downloadFile
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
            allowMethods:
              - POST
              - OPTIONS
      - http:
          path: files/download
          method: any
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
            allowMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
  createTicket:
    handler: lambdas/createTicket.handler
    layers:
      - {Ref: AwsSdkLayerLambdaLayer}
    events:
      - http:
          path: createTicket
          method: post
          cors: true
  quickLink:
    handler: lambdas/quickLink.handler
    layers:
      - {Ref: AwsSdkLayerLambdaLayer}
    events:
      - http:
          path: quickLink
          method: post
          cors: true
  documentAnalysis:
    handler: lambdas/getDocumentAnalysisStatus.handler
    layers:
      - {Ref: AwsSdkLayerLambdaLayer}
    events:
      - http:
          path: document-analysis/{proxy+}
          method: any
          cors: true

  # New async processing functions
  startProcessing:
    handler: lambdas/startProcessing.handler
    layers:
      - {Ref: AwsSdkLayerLambdaLayer}
    events:
      - http:
          path: startProcessing
          method: post
          cors: true
    memorySize: 256
    timeout: 29
    environment:
      SQS_QUEUE_URL: !Ref ProcessingQueue
      REQUEST_STATUS_TABLE: !Ref RequestStatusTable
      USER_INTERACTIONS_TABLE: !Ref UserInteractionsTable

  workerProcessor:
    handler: lambdas/workerProcessor.handler
    layers:
      - {Ref: AwsSdkLayerLambdaLayer}
    events:
      - sqs:
          arn: !GetAtt ProcessingQueue.Arn
          batchSize: 1
    memorySize: 1024
    timeout: 900 # 15 minutes, maximum Lambda timeout
    environment:
      REQUEST_STATUS_TABLE: !Ref RequestStatusTable
      DOCUMENT_ANALYSIS_STATE_MACHINE_ARN: ${env:DOCUMENT_ANALYSIS_STATE_MACHINE_ARN, 'arn:aws:states:us-east-1:361769603480:stateMachine:DocumentAnalysisWorkflow'}

  checkStatus:
    handler: lambdas/checkStatus.handler
    layers:
      - {Ref: AwsSdkLayerLambdaLayer}
    events:
      - http:
          path: checkStatus/{proxy+}
          method: any
          cors: true
    memorySize: 256
    timeout: 29
    environment:
      REQUEST_STATUS_TABLE: !Ref RequestStatusTable

  recordUserInteraction:
    handler: lambdas/recordUserInteraction.handler
    layers:
      - {Ref: AwsSdkLayerLambdaLayer}
    events:
      - http:
          path: recordUserInteraction
          method: post
          cors: true
    memorySize: 256
    timeout: 29
    environment:
      USER_INTERACTIONS_TABLE: !Ref UserInteractionsTable

  getUserFiles:
    handler: lambdas/getUserFiles.handler
    layers:
      - {Ref: AwsSdkLayerLambdaLayer}
    events:
      - http:
          path: getUserFiles
          method: post
          cors: true
    memorySize: 256
    timeout: 29
    environment:
      USER_FILES_TABLE: !Ref UserFilesTable

  # Existing document analysis functions
  initProcess:
    handler: functions/document-analysis/init-process.handler
    name: aseekbot-api-dev-init-process
    layers:
      - {Ref: AwsSdkLayerLambdaLayer}
  fileValidation:
    handler: functions/document-analysis/file-validation.handler
    name: aseekbot-api-dev-file-validation
    layers:
      - {Ref: AwsSdkLayerLambdaLayer}
  textractHandler:
    handler: functions/document-analysis/textract-handler.handler
    name: aseekbot-api-dev-textract-handler
    timeout: 300
    layers:
      - {Ref: AwsSdkLayerLambdaLayer}
  docxParser:
    handler: functions/document-analysis/docx-parser.handler
    name: aseekbot-api-dev-docx-parser
    layers:
      - {Ref: AwsSdkLayerLambdaLayer}
  excelParser:
    handler: functions/document-analysis/excel-parser.handler
    name: aseekbot-api-dev-excel-parser
    layers:
      - {Ref: AwsSdkLayerLambdaLayer}
  csvParser:
    handler: functions/document-analysis/csv-parser.handler
    name: aseekbot-api-dev-csv-parser
    layers:
      - {Ref: AwsSdkLayerLambdaLayer}
  contentAnalyzer:
    handler: functions/document-analysis/content-analyzer.handler
    name: aseekbot-api-dev-content-analyzer
    layers:
      - {Ref: AwsSdkLayerLambdaLayer}
  documentComparer:
    handler: functions/document-analysis/document-comparer.handler
    name: aseekbot-api-dev-document-comparer
    layers:
      - {Ref: AwsSdkLayerLambdaLayer}
  insightGenerator:
    handler: functions/document-analysis/insight-generator.handler
    name: aseekbot-api-dev-insight-generator
    layers:
      - {Ref: AwsSdkLayerLambdaLayer}
  resultStorage:
    handler: functions/document-analysis/result-storage.handler
    name: aseekbot-api-dev-result-storage
    layers:
      - {Ref: AwsSdkLayerLambdaLayer}
  errorHandler:
    handler: functions/document-analysis/error-handler.handler
    name: aseekbot-api-dev-error-handler
    layers:
      - {Ref: AwsSdkLayerLambdaLayer}
  statusUpdater:
    handler: functions/document-analysis/status-updater.handler
    name: aseekbot-api-dev-status-updater
    layers:
      - {Ref: AwsSdkLayerLambdaLayer}

resources:
  Resources:
    # SQS Queue for processing requests
    ProcessingQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: aseekbot-processing-queue
        VisibilityTimeout: 900  # Match with Lambda timeout (15 minutes)
        MessageRetentionPeriod: 1209600  # 14 days (maximum)
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt ProcessingDeadLetterQueue.Arn
          maxReceiveCount: 3  # Retry failed messages 3 times

    # Dead Letter Queue for failed processing
    ProcessingDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: aseekbot-processing-dlq
        MessageRetentionPeriod: 1209600  # 14 days

    # DynamoDB Table for request status tracking
    RequestStatusTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: RequestStatus
        AttributeDefinitions:
          - AttributeName: requestId
            AttributeType: S
          - AttributeName: sessionId
            AttributeType: S
        KeySchema:
          - AttributeName: requestId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: SessionIdIndex
            KeySchema:
              - AttributeName: sessionId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    # DynamoDB Table for user interactions tracking
    UserInteractionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UserInteractions
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    # DynamoDB Table for user files tracking
    UserFilesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UserFiles
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: fileKey
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: fileKey
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

custom:
  cors:
    allowOrigin: '*'
    allowHeaders:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
    allowMethods:
      - OPTIONS
      - POST
      - GET
